input {
  udp {
    port => 5960
    codec => plain {
      charset => "UTF-8"
    }
    type => "log4net_udp"
  }
}

filter {
  if [type] in [ "log4net_udp" ]  {
    mutate {
      add_field => [ "hostip", "%{host}" ]
    }
    dns {
      reverse => [ "host" ]
      action => replace
    }
    if [type] == "log4net" {
      grok {
        break_on_match => true
        remove_field => message
        match => {
          message => "(?m)%{TIMESTAMP_ISO8601:sourceTimestamp} \[%{NUMBER:threadid}\] %{LOGLEVEL:loglevel} +- %{IPORHOST:tempHost} - %{DATA:application} - %{DATA:component} - %{GREEDYDATA:tempMessage}((\r\n)|(\n))(?<exceptionType>(((%{JAVACLASS})|(System.))Exception)): (?<exceptionMessage>(%{GREEDYDATA}))((\r\n)|(\n))(?<stackTrace>(( )+at %{GREEDYDATA}))"
        }
        match => {
          message => "(?m)%{TIMESTAMP_ISO8601:sourceTimestamp} \[%{NUMBER:threadid}\] %{LOGLEVEL:loglevel} +- %{IPORHOST:tempHost} - %{DATA:application} - %{DATA:component} - %{GREEDYDATA:tempMessage}((\r\n)|(\n))(?<exceptionType>(((%{JAVACLASS})|(System.))Exception)): (?<exceptionMessage>(%{GREEDYDATA}))"
        }
        match => {
          message => "(?m)%{TIMESTAMP_ISO8601:sourceTimestamp} \[%{NUMBER:threadid}\] %{LOGLEVEL:loglevel} +- %{IPORHOST:tempHost} - %{DATA:application} - %{DATA:component} - %{GREEDYDATA:tempMessage}"
        }
      }
      if !("_grokparsefailure" in [tags]) {
        mutate {
          replace => [ "message" , "%{tempMessage}" ]
          replace => [ "host" , "%{tempHost}" ]
        }
      }
      mutate {
        remove_field => [ "tempMessage" ]
        remove_field => [ "tempHost" ]
      }
    }
  }
}

output {
  # if [type] == "log4net_udp"  {
    elasticsearch {
        hosts => ["http://elasticsearch:9200"]
        index => "log-generator-%{+YYYY.MM.dd}"
        user => "elastic"
        password => "changeme"
    }
  # }
 stdout { codec => rubydebug }
}